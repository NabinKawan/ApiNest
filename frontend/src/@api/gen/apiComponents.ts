/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { type ApiContext, useApiContext, queryKeyFn } from './apiContext';
import { deepMerge } from './apiUtils';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

type QueryFnOptions = {
    signal?: AbortController['signal'];
};

export type CreateWaitingListError = Fetcher.ErrorWrapper<undefined>;

export type CreateWaitingListResponse = {
    [key: string]: string;
};

export type CreateWaitingListVariables = {
    body: Schemas.DtoWaitingListRequestDTO;
} & ApiContext['fetcherOptions'];

export const fetchCreateWaitingList = (
    variables: CreateWaitingListVariables,
    signal?: AbortSignal
) =>
    apiFetch<
        CreateWaitingListResponse,
        CreateWaitingListError,
        Schemas.DtoWaitingListRequestDTO,
        {},
        {},
        {}
    >({ url: '/v1/waiting-list', method: 'post', ...variables, signal });

export const useCreateWaitingList = (
    options?: Omit<
        reactQuery.UseMutationOptions<
            CreateWaitingListResponse,
            CreateWaitingListError,
            CreateWaitingListVariables
        >,
        'mutationFn'
    >
) => {
    const { fetcherOptions } = useApiContext();
    return reactQuery.useMutation<
        CreateWaitingListResponse,
        CreateWaitingListError,
        CreateWaitingListVariables
    >({
        mutationFn: (variables: CreateWaitingListVariables) =>
            fetchCreateWaitingList(deepMerge(fetcherOptions, variables)),
        ...options,
    });
};

export type QueryOperation = {
    path: string;
    operationId: never;
    variables: unknown | reactQuery.SkipToken;
};
