// Code generated by cmd/model/generate.go. DO NOT EDIT.

package datamap

import "gorm.io/gorm"

// Package datamap provides PostgreSQL to Go type mappings for GORM gen

// DataMapEntry represents a mapping from PostgreSQL type to Go type
type DataMapEntry struct {
	PostgresType string
	GoType       string
}

// GetDataMapEntries returns all the type mappings for PostgreSQL to Go types
func GetDataMapEntries() []DataMapEntry {
	return []DataMapEntry{{
		GoType:       "pq.StringArray",
		PostgresType: "text[]",
	}, {
		GoType:       "[]byte",
		PostgresType: "jsonb",
	}, {
		GoType:       "[]byte",
		PostgresType: "json",
	}, {
		GoType:       "uuid.UUID",
		PostgresType: "uuid",
	}}
}

// BuildDataMap creates the dataMap for GORM gen to use for type mapping
func BuildDataMap() map[string]func(gorm.ColumnType) (dataType string) {
	dataMap := make(map[string]func(gorm.ColumnType) (dataType string))

	entries := GetDataMapEntries()
	for _, entry := range entries {
		// Create a closure to capture the entry value
		goType := entry.GoType
		dataMap[entry.PostgresType] = func(columnType gorm.ColumnType) (dataType string) {
			return goType
		}
	}

	return dataMap
}
