// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apinest/internal/db/gen/model"
)

func newWaitingList(db *gorm.DB, opts ...gen.DOOption) waitingList {
	_waitingList := waitingList{}

	_waitingList.waitingListDo.UseDB(db, opts...)
	_waitingList.waitingListDo.UseModel(&model.WaitingList{})

	tableName := _waitingList.waitingListDo.TableName()
	_waitingList.ALL = field.NewAsterisk(tableName)
	_waitingList.ID = field.NewField(tableName, "id")
	_waitingList.Email = field.NewString(tableName, "email")
	_waitingList.Status = field.NewField(tableName, "status")
	_waitingList.CreatedAt = field.NewTime(tableName, "created_at")
	_waitingList.UpdatedAt = field.NewTime(tableName, "updated_at")

	_waitingList.fillFieldMap()

	return _waitingList
}

type waitingList struct {
	waitingListDo waitingListDo

	ALL       field.Asterisk
	ID        field.Field
	Email     field.String
	Status    field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (w waitingList) Table(newTableName string) *waitingList {
	w.waitingListDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w waitingList) As(alias string) *waitingList {
	w.waitingListDo.DO = *(w.waitingListDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *waitingList) updateTableName(table string) *waitingList {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewField(table, "id")
	w.Email = field.NewString(table, "email")
	w.Status = field.NewField(table, "status")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *waitingList) WithContext(ctx context.Context) IWaitingListDo {
	return w.waitingListDo.WithContext(ctx)
}

func (w waitingList) TableName() string { return w.waitingListDo.TableName() }

func (w waitingList) Alias() string { return w.waitingListDo.Alias() }

func (w waitingList) Columns(cols ...field.Expr) gen.Columns { return w.waitingListDo.Columns(cols...) }

func (w *waitingList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *waitingList) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["email"] = w.Email
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w waitingList) clone(db *gorm.DB) waitingList {
	w.waitingListDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w waitingList) replaceDB(db *gorm.DB) waitingList {
	w.waitingListDo.ReplaceDB(db)
	return w
}

type waitingListDo struct{ gen.DO }

type IWaitingListDo interface {
	gen.SubQuery
	Debug() IWaitingListDo
	WithContext(ctx context.Context) IWaitingListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWaitingListDo
	WriteDB() IWaitingListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWaitingListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWaitingListDo
	Not(conds ...gen.Condition) IWaitingListDo
	Or(conds ...gen.Condition) IWaitingListDo
	Select(conds ...field.Expr) IWaitingListDo
	Where(conds ...gen.Condition) IWaitingListDo
	Order(conds ...field.Expr) IWaitingListDo
	Distinct(cols ...field.Expr) IWaitingListDo
	Omit(cols ...field.Expr) IWaitingListDo
	Join(table schema.Tabler, on ...field.Expr) IWaitingListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWaitingListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWaitingListDo
	Group(cols ...field.Expr) IWaitingListDo
	Having(conds ...gen.Condition) IWaitingListDo
	Limit(limit int) IWaitingListDo
	Offset(offset int) IWaitingListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWaitingListDo
	Unscoped() IWaitingListDo
	Create(values ...*model.WaitingList) error
	CreateInBatches(values []*model.WaitingList, batchSize int) error
	Save(values ...*model.WaitingList) error
	First() (*model.WaitingList, error)
	Take() (*model.WaitingList, error)
	Last() (*model.WaitingList, error)
	Find() ([]*model.WaitingList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WaitingList, err error)
	FindInBatches(result *[]*model.WaitingList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WaitingList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWaitingListDo
	Assign(attrs ...field.AssignExpr) IWaitingListDo
	Joins(fields ...field.RelationField) IWaitingListDo
	Preload(fields ...field.RelationField) IWaitingListDo
	FirstOrInit() (*model.WaitingList, error)
	FirstOrCreate() (*model.WaitingList, error)
	FindByPage(offset int, limit int) (result []*model.WaitingList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWaitingListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w waitingListDo) Debug() IWaitingListDo {
	return w.withDO(w.DO.Debug())
}

func (w waitingListDo) WithContext(ctx context.Context) IWaitingListDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w waitingListDo) ReadDB() IWaitingListDo {
	return w.Clauses(dbresolver.Read)
}

func (w waitingListDo) WriteDB() IWaitingListDo {
	return w.Clauses(dbresolver.Write)
}

func (w waitingListDo) Session(config *gorm.Session) IWaitingListDo {
	return w.withDO(w.DO.Session(config))
}

func (w waitingListDo) Clauses(conds ...clause.Expression) IWaitingListDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w waitingListDo) Returning(value interface{}, columns ...string) IWaitingListDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w waitingListDo) Not(conds ...gen.Condition) IWaitingListDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w waitingListDo) Or(conds ...gen.Condition) IWaitingListDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w waitingListDo) Select(conds ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w waitingListDo) Where(conds ...gen.Condition) IWaitingListDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w waitingListDo) Order(conds ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w waitingListDo) Distinct(cols ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w waitingListDo) Omit(cols ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w waitingListDo) Join(table schema.Tabler, on ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w waitingListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w waitingListDo) RightJoin(table schema.Tabler, on ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w waitingListDo) Group(cols ...field.Expr) IWaitingListDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w waitingListDo) Having(conds ...gen.Condition) IWaitingListDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w waitingListDo) Limit(limit int) IWaitingListDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w waitingListDo) Offset(offset int) IWaitingListDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w waitingListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWaitingListDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w waitingListDo) Unscoped() IWaitingListDo {
	return w.withDO(w.DO.Unscoped())
}

func (w waitingListDo) Create(values ...*model.WaitingList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w waitingListDo) CreateInBatches(values []*model.WaitingList, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w waitingListDo) Save(values ...*model.WaitingList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w waitingListDo) First() (*model.WaitingList, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WaitingList), nil
	}
}

func (w waitingListDo) Take() (*model.WaitingList, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WaitingList), nil
	}
}

func (w waitingListDo) Last() (*model.WaitingList, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WaitingList), nil
	}
}

func (w waitingListDo) Find() ([]*model.WaitingList, error) {
	result, err := w.DO.Find()
	return result.([]*model.WaitingList), err
}

func (w waitingListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WaitingList, err error) {
	buf := make([]*model.WaitingList, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w waitingListDo) FindInBatches(result *[]*model.WaitingList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w waitingListDo) Attrs(attrs ...field.AssignExpr) IWaitingListDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w waitingListDo) Assign(attrs ...field.AssignExpr) IWaitingListDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w waitingListDo) Joins(fields ...field.RelationField) IWaitingListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w waitingListDo) Preload(fields ...field.RelationField) IWaitingListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w waitingListDo) FirstOrInit() (*model.WaitingList, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WaitingList), nil
	}
}

func (w waitingListDo) FirstOrCreate() (*model.WaitingList, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WaitingList), nil
	}
}

func (w waitingListDo) FindByPage(offset int, limit int) (result []*model.WaitingList, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w waitingListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w waitingListDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w waitingListDo) Delete(models ...*model.WaitingList) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *waitingListDo) withDO(do gen.Dao) *waitingListDo {
	w.DO = *do.(*gen.DO)
	return w
}
